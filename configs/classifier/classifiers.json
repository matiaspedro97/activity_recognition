{
    "RF": {
        "_imports": "import sklearn.ensemble; import numpy as np",
        "_class": "sklearn.ensemble.RandomForestClassifier",
        "_params": {
        "n_estimators": 3,
            "criterion": "gini",
            "max_depth": "None",
            "min_samples_split": 0.2,
            "min_samples_leaf": 0.2,
            "max_features": 0.2,
            "class_weight": "balanced"
        },
        "_grid": {
            "n_estimators": [8,12,15,19,22],
            "criterion": ["gini", "entropy"],
            "max_depth": "[None] + list(range(3, 6))",
            "min_samples_split": [0.1, 0.3, 0.4],
            "min_samples_leaf": [0.1, 0.2, 0.3],
            "max_features": "np.linspace(0.5, 1, 3)",
            "class_weight": ["balanced"]
        }
    },
    "RF_comp": {
        "_imports": "import sklearn.ensemble; import numpy as np",
        "_class": "sklearn.ensemble.RandomForestClassifier",
        "_params": {
            "n_estimators": 3,
            "criterion": "gini",
            "max_depth": "None",
            "min_samples_split": 0.2,
            "min_samples_leaf": 0.2,
            "max_features": 0.2,
            "class_weight": "balanced"
        },
        "_grid": {
            "n_estimators": [10, 20, 50, 70],
            "criterion": ["gini"],
            "max_depth": [null, 3, 4],
            "min_samples_split": [0.1, 0.3, 0.5],
            "min_samples_leaf": [0.1, 0.3, 0.5],
            "max_features": [1],
            "class_weight": ["balanced"]
        }
       },
    "DT": {
        "_imports": "import sklearn.tree; import numpy as np",
        "_class": "sklearn.tree.DecisionTreeClassifier",
        "_params": {
            "criterion": "gini",
            "max_depth": "None",
            "min_samples_split": 0.2,
            "min_samples_leaf": 0.2,
            "max_features": 0.5,
            "splitter": "best",
            "class_weight": "balanced"
        },
        "_grid": {
            "criterion": ["gini"],
            "max_depth": [null, 4, 8],
            "min_samples_split": [0.1, 0.3],
            "min_samples_leaf": [0.1, 0.3],
            "max_features": [0.8, 1.0],
            "splitter": ["best"],
            "class_weight": ["balanced"]
        }
    },
    "SVM_lin": {
        "_imports": "import sklearn.svm; import numpy as np",
        "_class": "sklearn.svm.SVC",
        "_params": {
            "C": 1e0,
            "kernel": "rbf",
            "degree": 2,
            "tol": 1e-2,
            "gamma": "auto",
            "class_weight": "balanced",
            "probability": 1
        },
        "_grid": {
            "C": [1, 1e2, 1e-4],
            "kernel": ["linear"],
            "tol": [1e-2, 1e-4],
            "gamma": ["auto"],
            "class_weight": ["balanced"]
        }
    },
    "SVM_rbf": {
        "_imports": "import sklearn.svm; import numpy as np",
        "_class": "sklearn.svm.SVC",
        "_params": {
            "C": 1e0,
            "kernel": "rbf",
            "degree": 2,
            "tol": 1e-2,
            "gamma": "auto",
            "class_weight": "balanced",
            "probability": 1
        },
        "_grid": {
            "C": [1, 1e2, 1e-4],
            "kernel": ["rbf"],
            "degree": [2, 3, 4],
            "tol": [1e-2, 1e-4],
            "gamma": ["auto"],
            "class_weight": ["balanced"]
        }
    }
}
